substitutions:
  device_name: 'esp8266-siren-buzzer'
  friendly_name: 'Sirene Gang (Beneden)'

esp8266:
  board: d1_mini

packages:
  base_config: !include ./shared/base_config.yaml
  wifi: !include ./shared/wifi.yaml
  api: !include ./shared/api.yaml
  metrics: !include ./shared/metrics.yaml

globals:
  - id: sound_alarm
    type: std::string
    initial_value: '"PoliceSiren:d=2,o=5,b=160:g,c6,g,c6,g,c6,g,c6,g,c6,g,c6,g,c6,g,c6,g,c6,g,c6,g,c6,g,c6"'

output:
  - platform: esp8266_pwm
    pin: D1
    id: buzzer_output

rtttl:
  output: buzzer_output

script:
  - id: loop_alarm
    then:
      - while:
          condition:
            - lambda: 'return true;'
          then:
            - rtttl.play:
                rtttl: !lambda 'return id(sound_alarm);'
            - wait_until:
                - not:
                    rtttl.is_playing

  - id: loop_beep
    then:
      - while:
          condition:
            - lambda: 'return true;'
          then:
            - output.esp8266_pwm.set_frequency:
                id: buzzer_output
                frequency: 800Hz
            - output.set_level:
                id: buzzer_output
                level: 50%
            - output.turn_off: buzzer_output
            - delay: 1500ms
            - wait_until:
                - not:
                    rtttl.is_playing

  - id: play_success
    then:
      - output.esp8266_pwm.set_frequency:
          id: buzzer_output
          frequency: 800Hz
      - output.set_level:
          id: buzzer_output
          level: 50%
      - delay: 120ms
      - output.turn_off: buzzer_output
      - delay: 200ms
      - output.esp8266_pwm.set_frequency:
          id: buzzer_output
          frequency: 1000Hz
      - output.set_level:
          id: buzzer_output
          level: 50%
      - delay: 120ms
      - output.turn_off: buzzer_output

api:
  services:
    - service: alarm_arm
      then:
        - script.execute: loop_beep

    - service: alarm_armed
      then:
        - script.stop: loop_beep
        - delay: 200ms
        - rtttl.stop
        - script.execute: play_success

    - service: alarm_trigger
      then:
        - script.execute: loop_alarm

    - service: alarm_disarm
      then:
        - script.stop: loop_beep
        - script.stop: loop_alarm
        - rtttl.stop
        - script.execute: play_success

    - service: play_alarm_sound
      then:
        - rtttl.play:
            rtttl: !lambda 'return id(sound_alarm);'

    - service: play_rtttl_command
      variables:
        rtttl_song_string: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return rtttl_song_string;'
